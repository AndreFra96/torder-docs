{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"T-Order Developers Questa serie di documenti raccoglie tutta la documentazione dedicata agli sviluppatori interni di RCA SRL. Lo scopo di questi documenti \u00e8 quello di raccogliere gli aspetti tecnici dell'applicazione e lasciarne una traccia scritta per ottimizzare la manutenibilit\u00e0 del progetto. T-Order \u00e8 un software studiato per sopperire alle necessit\u00e0 specifiche dell'azienda RCA SRL. Il Software permette di affiancare gli utenti in tutte le fasi di vendita di un prodotto o servizio, partendo dalla creazione di un preventivo da proporre al cliente fino all'eventuale gestione della fatturazione periodica. La versione 3.0 permette il completo utilizzo del servizio senza necessit\u00e0 di una parte di frontend, infatti \u00e8 stata studiata per essere completa e indipendente. T-Order si apre quindi fornendo una serie di endpoint per ottenere informazioni sullo stato attuale degli ordini e di tutto cio che ad essi \u00e8 collegato, per aggiungere nuove ordini e/o informazioni e per consentirne la modifica.","title":"T-Order Developers"},{"location":"#t-order-developers","text":"Questa serie di documenti raccoglie tutta la documentazione dedicata agli sviluppatori interni di RCA SRL. Lo scopo di questi documenti \u00e8 quello di raccogliere gli aspetti tecnici dell'applicazione e lasciarne una traccia scritta per ottimizzare la manutenibilit\u00e0 del progetto. T-Order \u00e8 un software studiato per sopperire alle necessit\u00e0 specifiche dell'azienda RCA SRL. Il Software permette di affiancare gli utenti in tutte le fasi di vendita di un prodotto o servizio, partendo dalla creazione di un preventivo da proporre al cliente fino all'eventuale gestione della fatturazione periodica. La versione 3.0 permette il completo utilizzo del servizio senza necessit\u00e0 di una parte di frontend, infatti \u00e8 stata studiata per essere completa e indipendente. T-Order si apre quindi fornendo una serie di endpoint per ottenere informazioni sullo stato attuale degli ordini e di tutto cio che ad essi \u00e8 collegato, per aggiungere nuove ordini e/o informazioni e per consentirne la modifica.","title":"T-Order Developers"},{"location":"esempi/","text":"Esempi richieste Di seguito alcuni esempi riguardanti gli endpoint principali delle API e del loro utilizzo. Login Username/Password Effettua il login con username e passord curl \"http://localhost:3000/api/login\" \\ -X POST \\ -H \"Content-Type: application/json\" \\ -d '{\"username\":\"{username}\",\"password\":\"{password}\"}' Ordine Ottieni tutti Ottieni tutti gli ordini, questo endpoint va preferibilmente evitato poich\u00e8 molto lento. curl \"http://localhost:3000/api/ordine\" \\ -X GET \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\ Ottieni in base all'id Ottieni uno specifico ordine in base al suo id curl \"http://localhost:3000/api/ordine/{id}\" \\ -X GET \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\ Ottieni pagina Ottieni una pagina di ordini curl \"http://localhost:3000/api/ordine/pagina/{numero_pagina}\" \\ -X GET \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\ Ottieni con Join Ottieni uno specifico ordine e il cliente associato in base all'id dell'ordine curl \"http://localhost:3000/api/ordine/{id}\" \\ -X GET \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\ -d '{\"options\":{\"include\":\"cliente_cliente\"}}' Matricole e Date di attivazione E' disponibile uno specifico endpoint per ottenere lo stato di inserimento di matricole e date di attivazione e uno per cancellare contemporaneamente tutte quelle legate ad uno specifico ordine Ottieni curl \"http://localhost:3000/api/ordine/{id}/serialActivation\" \\ -X GET \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\ Cancella curl \"http://localhost:3000/api/ordine/{id}/serialActivation\" \\ -X DELETE \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\ Stato selezionabile E' disponibile uno specifico endpoint per sapere quali sono i possibili stati di destinazione dell'ordine. curl \"http://localhost:3000/api/ordine/{id}/availableStatus\" \\ -X GET \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\ Modifica stato E' disponibile uno specifico endpoint per modificare lo stato di un ordine, utilizzando questo endpoint vengono effettuati i controlli e le azioni necessarie prima della modifica dello stato. curl \"http://localhost:3000/api/ordine/{id}/stato/{stato}\" \\ -X PUT \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\ Rinnovi Annuali Effettua rinnovo Avvia la conferma di un rinnovo curl \"http://localhost:3000/api/rinnovo/{id}/rinnova\" \\ -X PUT \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\ Totale per profilo Un'informazione utile, disponibile direttamente tramite uno specifico endpoint \u00e8 il totale dei rinnovi di un certo mese e anno raggruppati per profilo locale Richiesta: curl \"http://localhost:3000/api/rinnovo/totaleProfili/{mese}/{anno}\" \\ -X GET \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\ Risposta: [ { \"descrizione\":\"descrizione_gruppo\", \"totale\":totale }, ... ]","title":"Esempi"},{"location":"esempi/#esempi-richieste","text":"Di seguito alcuni esempi riguardanti gli endpoint principali delle API e del loro utilizzo.","title":"Esempi richieste"},{"location":"esempi/#login","text":"","title":"Login"},{"location":"esempi/#usernamepassword","text":"Effettua il login con username e passord curl \"http://localhost:3000/api/login\" \\ -X POST \\ -H \"Content-Type: application/json\" \\ -d '{\"username\":\"{username}\",\"password\":\"{password}\"}'","title":"Username/Password"},{"location":"esempi/#ordine","text":"","title":"Ordine"},{"location":"esempi/#ottieni-tutti","text":"Ottieni tutti gli ordini, questo endpoint va preferibilmente evitato poich\u00e8 molto lento. curl \"http://localhost:3000/api/ordine\" \\ -X GET \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\","title":"Ottieni tutti"},{"location":"esempi/#ottieni-in-base-allid","text":"Ottieni uno specifico ordine in base al suo id curl \"http://localhost:3000/api/ordine/{id}\" \\ -X GET \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\","title":"Ottieni in base all'id"},{"location":"esempi/#ottieni-pagina","text":"Ottieni una pagina di ordini curl \"http://localhost:3000/api/ordine/pagina/{numero_pagina}\" \\ -X GET \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\","title":"Ottieni pagina"},{"location":"esempi/#ottieni-con-join","text":"Ottieni uno specifico ordine e il cliente associato in base all'id dell'ordine curl \"http://localhost:3000/api/ordine/{id}\" \\ -X GET \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\ -d '{\"options\":{\"include\":\"cliente_cliente\"}}'","title":"Ottieni con Join"},{"location":"esempi/#matricole-e-date-di-attivazione","text":"E' disponibile uno specifico endpoint per ottenere lo stato di inserimento di matricole e date di attivazione e uno per cancellare contemporaneamente tutte quelle legate ad uno specifico ordine","title":"Matricole e Date di attivazione"},{"location":"esempi/#ottieni","text":"curl \"http://localhost:3000/api/ordine/{id}/serialActivation\" \\ -X GET \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\","title":"Ottieni"},{"location":"esempi/#cancella","text":"curl \"http://localhost:3000/api/ordine/{id}/serialActivation\" \\ -X DELETE \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\","title":"Cancella"},{"location":"esempi/#stato-selezionabile","text":"E' disponibile uno specifico endpoint per sapere quali sono i possibili stati di destinazione dell'ordine. curl \"http://localhost:3000/api/ordine/{id}/availableStatus\" \\ -X GET \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\","title":"Stato selezionabile"},{"location":"esempi/#modifica-stato","text":"E' disponibile uno specifico endpoint per modificare lo stato di un ordine, utilizzando questo endpoint vengono effettuati i controlli e le azioni necessarie prima della modifica dello stato. curl \"http://localhost:3000/api/ordine/{id}/stato/{stato}\" \\ -X PUT \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\","title":"Modifica stato"},{"location":"esempi/#rinnovi-annuali","text":"","title":"Rinnovi Annuali"},{"location":"esempi/#effettua-rinnovo","text":"Avvia la conferma di un rinnovo curl \"http://localhost:3000/api/rinnovo/{id}/rinnova\" \\ -X PUT \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\","title":"Effettua rinnovo"},{"location":"esempi/#totale-per-profilo","text":"Un'informazione utile, disponibile direttamente tramite uno specifico endpoint \u00e8 il totale dei rinnovi di un certo mese e anno raggruppati per profilo locale Richiesta: curl \"http://localhost:3000/api/rinnovo/totaleProfili/{mese}/{anno}\" \\ -X GET \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer {token}\" \\ Risposta: [ { \"descrizione\":\"descrizione_gruppo\", \"totale\":totale }, ... ]","title":"Totale per profilo"},{"location":"integrazioni/","text":"Integrazioni T-Order \u00e8 integrato direttamente con due software: Trace e E. Trace gestisce le anagrafiche dei clienti e il calendario degli interventi mentre E \u00e8 un programma di contabilit\u00e0 che si occupa di generare impegni e fatture. Trace \u2192 T-order Il passaggio di informazioni da Trace a T-order avviene tramite scrittura da parte di Trace nelle seguenti tabelle del database di T-Order (vecchio nome \u2192 nuovo nome): Clienti (t_customer \u2192 cliente) customer_id_trace \u2192 id_trace customer_ragsoc \u2192 ragsoc customer_indirizzo \u2192 via customer_cap \u2192 cap customer_city \u2192 citta customer_prov \u2192 provincia customer_piva \u2192 piva customer_codfisc \u2192 codfisc Locali (t_location \u2192 locale) location_loc_desc \u2192 nome location_address \u2192 via location_city \u2192 citta location_provincia \u2192 prov location_telephone \u2192 tel location_telephone1 \u2192 #ELIMINATO location_telephone2 \u2192 #ELIMINATO location_mail \u2192 mail Articoli (t_article \u2192 articolo) article_id_trace \u2192 id_trace article_title \u2192 title article_grp \u2192 gruppo cost_price \u2192 costo active \u2192 attivo import_trace \u2192 import_trace data_insert \u2192 data_insert data_update \u2192 data_update Gruppi Articoli (t_group \u2192 gruppo) group_loc_desc \u2192 descrizione group_id_trace \u2192 id_trace group_order \u2192 #ELIMINATO group_type_id \u2192 tipo_gruppo Prezzi (t_article_price \u2192 prezzo) cod_art \u2192 cod_art cod_listino \u2192 cod_listino prg_listino \u2192 prg_listino prz_listino \u2192 prz_listino data_insert \u2192 data_insert data_update \u2192 data_update t_trace: Nuovi articoli cliente T-order \u2192 Trace Trace legge da t_trace se date_import_trace \u00e8 null & tipo != 5 Se deleted = 1: (Disdetta) Effettua disdetta basata su trace_id Se id_trace non \u00e8 compilato: (Creazione) customer_id prg_location article_id serial_number installation_date due_date_maintenance Se id_trace \u00e8 compilato: (Modifica) customer_id prg_location article_id serial_number installation_date due_date_maintenance Trace legge z_trace_scaduti ?? E \u2192 T-order E scrive nelle tabelle: ex_insoluti ex_invoice ex_invoice_item ex_scaduti Metodi di pagamento (t_payment_esatto) E effettua modifiche: cambia stato ordine \u2192 impegno (ordine) ordine.order_id_esatto (numero impegno) ordine.is_billed (data_fatturazione) ordine.has_rid (appalto) ordine.rid_date ordine.invoice_nr (numero fattura) ordine.impegno_nr (numero impegno) ordine.invoice_id (id fattura) articolo_ordine.date_esatto (data import e) articolo_ordine.item_id_esatto (id item e) t_order_item_desc.date_import_e (data import e) t_order_item_desc.id_esatto (id e) cliente.id_trace (aggiorna cliente con id_trace) locale.prg (aggiorna locale con prg) T-order \u2192 E E legge da viste: e_order (unione di e_order_customer e e_order_customer_fb) e_order_item e_ratei e_rinnovi e_rinnovi_item e_rinnovi_item_desc t_contact La tabella t_contact \u00e8 direttamente condivisa fra Trace e T-Order e contiene i contatti dei clienti. Trace legge e scrive senza nostri id cliente/locale. Creazione nuovi clienti/locali: Procedura di generazione di nuovi clienti/locali a partire da T-Order: e legge vista preventivo con nuovo cliente/locale crea anagrafica cliente crea anagrafica locale aggiorna il nostro database con id cliente (via piva) aggiorna il nostro database con prg locale (locale senza prg con piva)","title":"Integrazioni"},{"location":"integrazioni/#integrazioni","text":"T-Order \u00e8 integrato direttamente con due software: Trace e E. Trace gestisce le anagrafiche dei clienti e il calendario degli interventi mentre E \u00e8 un programma di contabilit\u00e0 che si occupa di generare impegni e fatture.","title":"Integrazioni"},{"location":"integrazioni/#trace-t-order","text":"Il passaggio di informazioni da Trace a T-order avviene tramite scrittura da parte di Trace nelle seguenti tabelle del database di T-Order (vecchio nome \u2192 nuovo nome): Clienti (t_customer \u2192 cliente) customer_id_trace \u2192 id_trace customer_ragsoc \u2192 ragsoc customer_indirizzo \u2192 via customer_cap \u2192 cap customer_city \u2192 citta customer_prov \u2192 provincia customer_piva \u2192 piva customer_codfisc \u2192 codfisc Locali (t_location \u2192 locale) location_loc_desc \u2192 nome location_address \u2192 via location_city \u2192 citta location_provincia \u2192 prov location_telephone \u2192 tel location_telephone1 \u2192 #ELIMINATO location_telephone2 \u2192 #ELIMINATO location_mail \u2192 mail Articoli (t_article \u2192 articolo) article_id_trace \u2192 id_trace article_title \u2192 title article_grp \u2192 gruppo cost_price \u2192 costo active \u2192 attivo import_trace \u2192 import_trace data_insert \u2192 data_insert data_update \u2192 data_update Gruppi Articoli (t_group \u2192 gruppo) group_loc_desc \u2192 descrizione group_id_trace \u2192 id_trace group_order \u2192 #ELIMINATO group_type_id \u2192 tipo_gruppo Prezzi (t_article_price \u2192 prezzo) cod_art \u2192 cod_art cod_listino \u2192 cod_listino prg_listino \u2192 prg_listino prz_listino \u2192 prz_listino data_insert \u2192 data_insert data_update \u2192 data_update t_trace: Nuovi articoli cliente","title":"Trace \u2192 T-order"},{"location":"integrazioni/#t-order-trace","text":"Trace legge da t_trace se date_import_trace \u00e8 null & tipo != 5 Se deleted = 1: (Disdetta) Effettua disdetta basata su trace_id Se id_trace non \u00e8 compilato: (Creazione) customer_id prg_location article_id serial_number installation_date due_date_maintenance Se id_trace \u00e8 compilato: (Modifica) customer_id prg_location article_id serial_number installation_date due_date_maintenance Trace legge z_trace_scaduti ??","title":"T-order \u2192 Trace"},{"location":"integrazioni/#e-t-order","text":"E scrive nelle tabelle: ex_insoluti ex_invoice ex_invoice_item ex_scaduti Metodi di pagamento (t_payment_esatto) E effettua modifiche: cambia stato ordine \u2192 impegno (ordine) ordine.order_id_esatto (numero impegno) ordine.is_billed (data_fatturazione) ordine.has_rid (appalto) ordine.rid_date ordine.invoice_nr (numero fattura) ordine.impegno_nr (numero impegno) ordine.invoice_id (id fattura) articolo_ordine.date_esatto (data import e) articolo_ordine.item_id_esatto (id item e) t_order_item_desc.date_import_e (data import e) t_order_item_desc.id_esatto (id e) cliente.id_trace (aggiorna cliente con id_trace) locale.prg (aggiorna locale con prg)","title":"E \u2192 T-order"},{"location":"integrazioni/#t-order-e","text":"E legge da viste: e_order (unione di e_order_customer e e_order_customer_fb) e_order_item e_ratei e_rinnovi e_rinnovi_item e_rinnovi_item_desc","title":"T-order \u2192 E"},{"location":"integrazioni/#t_contact","text":"La tabella t_contact \u00e8 direttamente condivisa fra Trace e T-Order e contiene i contatti dei clienti. Trace legge e scrive senza nostri id cliente/locale.","title":"t_contact"},{"location":"integrazioni/#creazione-nuovi-clientilocali","text":"Procedura di generazione di nuovi clienti/locali a partire da T-Order: e legge vista preventivo con nuovo cliente/locale crea anagrafica cliente crea anagrafica locale aggiorna il nostro database con id cliente (via piva) aggiorna il nostro database con prg locale (locale senza prg con piva)","title":"Creazione nuovi clienti/locali:"},{"location":"ordini/","text":"Ordini Il concetto chiave di t-order sono gli ordini, un ordine rappresenta un singolo rapporto di vendita verso un cliente. Ogni ordine viene generato come preventivo e segue una serie di passaggi prestabiliti che portano fino alla completa evasione, affiancando gli impiegati dei diversi settori nelle specifiche fasi che li coinvolgono. Per convenzione all'interno della documentazione si utilizzer\u00e0 il termine ordine per riferirsi ad un ordine in qualsiasi stato, nel caso in cui fosse necessario riferirsi ad uno specifico stato sar\u00e0 scritto in maiuscolo ORDINE. Tabelle coinvolte Gli ordini e le informazioni ad essi collegate sono salvate nelle seguenti tabelle: ordine \u2192 contiene tutti gli ordini articolo_ordine \u2192 contiene tutti gli articoli di un ordine attivazione_articolo_ordine \u2192 contiene le date di attivazione relative agli articoli ordine matricola_articolo_ordine \u2192 contiene le matricole relative agli articoli ordine articolo_cliente_ordine \u2192 contiene gli articoli gi\u00e0 in possesso dal cliente inseriti all'interno dell'ordine per l'importazione in trace in fase di evasione Informazioni ordine Ad ogni ordine sono associate diverse informazioni, alcune salvate nella tabella ordine e altre salvate in tabelle secondarie. Cliente Ogni ordine deve essere associato ad un cliente, l'associazione con il cliente avviene tramite scrittura dell'id del cliente nel campo cliente della tabella ordine. I clienti vengono sincronizzati bilateralmente con trace. Il passaggio da trace a t-order avviene tramite scrittura nella tabella clienti, nel momento dell'inserimento trace compila il campo id_trace con un identificativo univoco relativo al cliente. Il passaggio da t-order a trace avviene quando l'ordine si trova in fase ORDINE, prima di generare l'impegno infatti trace controlla se il cliente ha il campo trace_id a null e nel caso inserisce il cliente nel suo database e aggiorna il campo trace_id della tabella cliente con il nuovo id. (Vedi documentazione sincronizzazioni per ulteriori informazioni) Locale Ogni ordine pu\u00f2 essere associato ad uno specifico locale di un cliente, l'associazione con il locale avviene tramite scrittura dell'id del locale nel campo locale della tabella ordine. La sincronizzazione con trace avviene nello stesso modo in cui avviene la sincronizzazione dei clienti. (Vedi documentazione sincronizzazioni per ulteriori informazioni) Articoli Ordine Ad ogni ordine sono associati una serie di articoli, salvati nella tabella articolo_ordine. Ogni articolo_ordine possiede una serie di informazioni: ordine \u2192 campo di associazione con l'ordine, contiene l'id dell'ordine di appartenenza articolo \u2192 campo di associazione con l'articolo, contiene l'id dell'articolo quantit\u00e0 prezzo \u2192 il prezzo di partenza pu\u00f2 essere modificato rispetto al prezzo di base dell'articolo sconto \u2192 sconto sull'articolo Ordini con canoni Se il campo has_rid della tabella ordine \u00e8 true significa che l'ordine in questione \u00e8 un ordine con canone e gli unici articoli che possono essere associati sono gli articoli appartenenti ad un gruppo con mth_12 = 1 (mensili). Questi ordini una volta evasi permetteranno di generare dei rinnovi mensili. Sconto sul Totale Oltre agli sconti effettuati sul singolo articolo \u00e8 possibile effettuare uno sconto generale su tutto il carrello, questa informazione viene memorizzata tramite il campo totale della tabella ordine. Matricole e Date di attivazione Per ogni articolo ordine: l'inserimento della matricola \u00e8 obbligatorio se l'articolo corrispondente all'articolo ordine ha need_serial = 1 oppure se ha need_serial_grenke = 1 e l'ordine ha grenke = 1 need_serial == 1 || (need_serial_grenke == 1 && grenke == 1); l'inserimento della data di attivazione \u00e8 obbligatorio se l'articolo corrispondente \u00e8 un articolo di tipo rinnovo (mth_1 = 1 o mth_12 = 1 o mth_24 = 1 o new_year = 1) mth_1 == 1 || mth_12 == 1 || mth_24 == 1 || new_year == 1; Le matricole vengono salvate nella tabella matricola_articolo_ordine e le date di attivazione nella tabella attivazione_articolo_ordine. Dato che la tabella articoli cliente prevede un campo quantit\u00e0 mentre la matricola o data di attivazione \u00e8 da assegnare al singolo articolo le tabelle attivazione_articolo_ordine e matricola_articolo_ordine hanno un campo prg (intero progressivo), utilizzato per riferirsi ad uno spefico oggetto anche quando la quantit\u00e0 \u00e8 maggiore di 1. Fatturazione All'interno dell'ordine \u00e8 necessario inserire una serie di informazioni che saranno utilizzate per la generazione della fattura: Tipo di fatturazione: Per ogni ordine \u00e8 necessario definire un tipo per la fatturazione, i tipi disponibili cambiano in funzione del campo has_rid (ordine con canoni) dell'ordine - se has_rid = 1: - Fatturazione Mensile - Fatturazione Trimestrale - Fatturazione Semestrale - se has_rid = 0: - Singola Fatturazione Fatturazione alternativa: Per ogni ordine \u00e8 possibile definire un secondo cliente al quale intestare la fattura, l'impostazione di un cliente per la fatturazione alternativa avviene tramite scrittura nel campo cliente_fatt_alt dell'id del cliente alternativo. Grenke: Indica un ordine di tipo grenke, questo campo viene impostato a 1 automaticamente quando viene selezionato il cliente grenke. Se questo campo \u00e8 a 1 gli articoli inseriti nell'ordine con need_serial_grenke = 1 avranno bisogno della matricola Acconto Per ogni ordine \u00e8 possibile associare un acconto, l'inserimento di un acconto comporta la creazione di un secondo ordine di acconto nel momento di passaggio dallo stato preventivo allo stato ORDINE. L'inserimento dell'acconto avviene tramite scrittura dei campi down_payment (totale acconto) e down_payment_type (metodo di pagamento). La creazione dell'acconto avviene quando down_payment \u00e8 > 0, in tal caso se down_payment_type non corrisponde ad un metodo di pagamento viene sollevato un errore. L'ordine di acconto viene generato automaticamente nello stato evaso. Pagamento E' necessario associare ad ogni ordine un metodo di pagamento. L'associazione avviene tramite scrittura nel campo pagamento della tabella ordine dell'id del metodo di pagamento. Attesa di pagamento E' possibile bloccare il passaggio di stato di un ordine in attesa del pagamento impostando il campo wait_payment dell'ordine a 1. Informazioni tecniche E' possibile inserire delle informazioni del reparto tecnico all'interno dell'ordine: tecnico \u2192 l'assegnazione di un ordine ad un tecnico prevede l'invio di una mail al tecnico interessato data_consegna note_tecniche Articoli cliente All'interno di un ordine \u00e8 possibile inserire degli articoli che sono gi\u00e0 in possesso del cliente per poter sincronizzare l'informazione con trace. Questi articoli vengono trattati in maniera diversa rispetto agli articolo_ordine e vengono salvati in una tabella dedicata (articolo_cliente_ordine). E' possibile inserire in questa tabella tutti gli articoli appartenenti ad un gruppo con aggiungi_a_cliente = true. Allegati E' possibile allegare ad un ordine diversi file, i file devono essere caricati tramite lo specifico enpoint. PDF E' disponibile uno specifico endpoint che resitituisce un file PDF con una rappresentazione dell'ordine. Ciclo dell'ordine Fasi Ogni ordine segue un ciclo specifico che comprende 5 fasi: Preventivo E' lo stato iniziale di ogni ordine e rappresenta il momento dell'offerta al cliente, permette l'inserimento di molte informazioni mantenendone la maggior parte non obbligatorie. In questo modo \u00e8 possibile creare un preventivo iniziale con le informazioni in possesso per poi integrarle in seguito. Ordine E' il primo stato successivo alla conferma del preventivo, il passaggio a questo stato rappresenta il raggiunto accordo con il cliente sull'ordine e permette di procedere ai passaggi successivi. Per effettuare il passaggio ad ordine \u00e8 necessario inserire buona parte delle informazioni che erano facoltative in fase di preventivo. Gli ordini in questo stato vengono letti dal programma di contabilit\u00e0 che genera l'impegno e modifica lo stato impostandolo ad impegno. Impegno Quando un ordine giunge in questo stato significa che \u00e8 stato generato correttamente l'impegno in contabilit\u00e0 e, dopo i necessari controlli, \u00e8 possibile passare allo stato lavorazione Lavorazione Lo stato in lavorazione indica che \u00e8 in corso la fase di preparazione del materiale e di consegna al cliente. Evaso E' lo stato finale di un ordine, quando un ordine giunge in questo stato significa che il ciclo \u00e8 completato e gli articoli inseriti possono essere sincronizzati con trace e letti dal programma di contabilit\u00e0 per procedere alla generazione della fattura. Passaggi di stato Quando un ordine viene creato si trova in fase di preventivo, nel passaggio agli stati successivi vengono effettuate diverse operazioni che \u00e8 possibile suddividere in 2 categorie: controlli e azioni. I controlli e le azioni vengono effettuati prima del passaggio di stato tramite un middleware inserito nell'endpoint di modifica stato di un ordine. Per ogni ordine viene controllato che lo stato di destinazione non sia uguale allo stato attuale e che sia compatibile con lo stato dell'ordine attuale. Calcolo stati disponibili: switch (ordine.stato) { case 1: if (ordine.deleted) stati_disponibili = [ { status_id: 0, status_loc_desc: \"CANCELLATO\", active: true }, { status_id: 1, status_loc_desc: \"ARCHIVIATO\", active: false }, { status_id: 2, status_loc_desc: \"PREVENTIVO\", active: false }, ]; else stati_disponibili = [ { status_id: 0, status_loc_desc: \"CANCELLATO\", active: false }, { status_id: 1, status_loc_desc: \"ARCHIVIATO\", active: true }, { status_id: 2, status_loc_desc: \"PREVENTIVO\", active: false }, ]; break; case 2: stati_disponibili = [ { status_id: 0, status_loc_desc: \"CANCELLATO\", active: false }, { status_id: 1, status_loc_desc: \"ARCHIVIATO\", active: false }, { status_id: 2, status_loc_desc: \"PREVENTIVO\", active: true }, { status_id: 3, status_loc_desc: \"ORDINE\", active: false }, ]; break; case 3: stati_disponibili = [ { status_id: 3, status_loc_desc: \"ORDINE\", active: true }, ]; break; case 5: if (ordine.data_fatturazione == null) stati_disponibili = [ { status_id: 5, status_loc_desc: \"IMPEGNO\", active: true }, { status_id: 6, status_loc_desc: \"LAVORAZIONE\", active: false }, { status_id: 0, status_loc_desc: \"CANCELLATO\", active: false }, ]; else stati_disponibili = [ { status_id: 5, status_loc_desc: \"IMPEGNO\", active: true }, { status_id: 6, status_loc_desc: \"LAVORAZIONE\", active: false }, ]; break; case 6: if (ordine.data_fatturazione == null) stati_disponibili = [ { status_id: 6, status_loc_desc: \"LAVORAZIONE\", active: true }, { status_id: 7, status_loc_desc: \"EVASO\", active: false }, { status_id: 0, status_loc_desc: \"CANCELLATO\", active: false }, ]; else stati_disponibili = [ { status_id: 6, status_loc_desc: \"LAVORAZIONE\", active: true }, { status_id: 7, status_loc_desc: \"EVASO\", active: false }, ]; break; case 7: if (ordine.data_fatturazione == null) stati_disponibili = [ { status_id: 7, status_loc_desc: \"EVASO\", active: true }, { status_id: 0, status_loc_desc: \"CANCELLATO\", active: false }, ]; else stati_disponibili = [ { status_id: 7, status_loc_desc: \"EVASO\", active: true }, ]; break; default: stati_disponibili = []; } Controlli specifici per stato: I controlli e le azioni effettuati in seguito dipendono dallo stato di destinazione dell'ordine, se i controlli o le azioni sollevano un errore il passaggio di stato non viene eseguito \u2192 Preventivo (2) Azioni: Aggiorno la data dell'ordine impostando la data attuale \u2192 Ordine (3) Controlli: Campi obbligatori locale (loc_desc,via,citta,prov,profilo_locale) Campi obbligatori cliente (ragosc,via,cap,citta,provincia,piva) IBAN obbligatorio se pagamento con sdd Note tecniche obbligatorie in base agli articoli inseriti (se c'\u00e8 almeno un articolo con order_note = 1 note_tecniche \u00e8 obbligatorio) Azioni: Aggiorno la data dell'ordine impostando la data attuale Generazione ordine di acconto (se down_payment > 0) Invio mail creazione ordine \u2192 Lavorazione (6) Controlli: ordine non in attesa di pagamento (wait_payment) \u2192 Evaso (7) Controlli: ordine non in attesa di pagamento (wait_payment) sono state inserite le matricole e attivazioni necessarie prg locale obbligatorio id_trace cliente obbligatorio Azioni: Aggiorno la data_evasione dell'ordine con la data attuale Eseguo import ordine in trace (compresi articoli cliente)","title":"Ordini"},{"location":"ordini/#ordini","text":"Il concetto chiave di t-order sono gli ordini, un ordine rappresenta un singolo rapporto di vendita verso un cliente. Ogni ordine viene generato come preventivo e segue una serie di passaggi prestabiliti che portano fino alla completa evasione, affiancando gli impiegati dei diversi settori nelle specifiche fasi che li coinvolgono. Per convenzione all'interno della documentazione si utilizzer\u00e0 il termine ordine per riferirsi ad un ordine in qualsiasi stato, nel caso in cui fosse necessario riferirsi ad uno specifico stato sar\u00e0 scritto in maiuscolo ORDINE.","title":"Ordini"},{"location":"ordini/#tabelle-coinvolte","text":"Gli ordini e le informazioni ad essi collegate sono salvate nelle seguenti tabelle: ordine \u2192 contiene tutti gli ordini articolo_ordine \u2192 contiene tutti gli articoli di un ordine attivazione_articolo_ordine \u2192 contiene le date di attivazione relative agli articoli ordine matricola_articolo_ordine \u2192 contiene le matricole relative agli articoli ordine articolo_cliente_ordine \u2192 contiene gli articoli gi\u00e0 in possesso dal cliente inseriti all'interno dell'ordine per l'importazione in trace in fase di evasione","title":"Tabelle coinvolte"},{"location":"ordini/#informazioni-ordine","text":"Ad ogni ordine sono associate diverse informazioni, alcune salvate nella tabella ordine e altre salvate in tabelle secondarie.","title":"Informazioni ordine"},{"location":"ordini/#cliente","text":"Ogni ordine deve essere associato ad un cliente, l'associazione con il cliente avviene tramite scrittura dell'id del cliente nel campo cliente della tabella ordine. I clienti vengono sincronizzati bilateralmente con trace. Il passaggio da trace a t-order avviene tramite scrittura nella tabella clienti, nel momento dell'inserimento trace compila il campo id_trace con un identificativo univoco relativo al cliente. Il passaggio da t-order a trace avviene quando l'ordine si trova in fase ORDINE, prima di generare l'impegno infatti trace controlla se il cliente ha il campo trace_id a null e nel caso inserisce il cliente nel suo database e aggiorna il campo trace_id della tabella cliente con il nuovo id. (Vedi documentazione sincronizzazioni per ulteriori informazioni)","title":"Cliente"},{"location":"ordini/#locale","text":"Ogni ordine pu\u00f2 essere associato ad uno specifico locale di un cliente, l'associazione con il locale avviene tramite scrittura dell'id del locale nel campo locale della tabella ordine. La sincronizzazione con trace avviene nello stesso modo in cui avviene la sincronizzazione dei clienti. (Vedi documentazione sincronizzazioni per ulteriori informazioni)","title":"Locale"},{"location":"ordini/#articoli-ordine","text":"Ad ogni ordine sono associati una serie di articoli, salvati nella tabella articolo_ordine. Ogni articolo_ordine possiede una serie di informazioni: ordine \u2192 campo di associazione con l'ordine, contiene l'id dell'ordine di appartenenza articolo \u2192 campo di associazione con l'articolo, contiene l'id dell'articolo quantit\u00e0 prezzo \u2192 il prezzo di partenza pu\u00f2 essere modificato rispetto al prezzo di base dell'articolo sconto \u2192 sconto sull'articolo Ordini con canoni Se il campo has_rid della tabella ordine \u00e8 true significa che l'ordine in questione \u00e8 un ordine con canone e gli unici articoli che possono essere associati sono gli articoli appartenenti ad un gruppo con mth_12 = 1 (mensili). Questi ordini una volta evasi permetteranno di generare dei rinnovi mensili. Sconto sul Totale Oltre agli sconti effettuati sul singolo articolo \u00e8 possibile effettuare uno sconto generale su tutto il carrello, questa informazione viene memorizzata tramite il campo totale della tabella ordine. Matricole e Date di attivazione Per ogni articolo ordine: l'inserimento della matricola \u00e8 obbligatorio se l'articolo corrispondente all'articolo ordine ha need_serial = 1 oppure se ha need_serial_grenke = 1 e l'ordine ha grenke = 1 need_serial == 1 || (need_serial_grenke == 1 && grenke == 1); l'inserimento della data di attivazione \u00e8 obbligatorio se l'articolo corrispondente \u00e8 un articolo di tipo rinnovo (mth_1 = 1 o mth_12 = 1 o mth_24 = 1 o new_year = 1) mth_1 == 1 || mth_12 == 1 || mth_24 == 1 || new_year == 1; Le matricole vengono salvate nella tabella matricola_articolo_ordine e le date di attivazione nella tabella attivazione_articolo_ordine. Dato che la tabella articoli cliente prevede un campo quantit\u00e0 mentre la matricola o data di attivazione \u00e8 da assegnare al singolo articolo le tabelle attivazione_articolo_ordine e matricola_articolo_ordine hanno un campo prg (intero progressivo), utilizzato per riferirsi ad uno spefico oggetto anche quando la quantit\u00e0 \u00e8 maggiore di 1.","title":"Articoli Ordine"},{"location":"ordini/#fatturazione","text":"All'interno dell'ordine \u00e8 necessario inserire una serie di informazioni che saranno utilizzate per la generazione della fattura: Tipo di fatturazione: Per ogni ordine \u00e8 necessario definire un tipo per la fatturazione, i tipi disponibili cambiano in funzione del campo has_rid (ordine con canoni) dell'ordine - se has_rid = 1: - Fatturazione Mensile - Fatturazione Trimestrale - Fatturazione Semestrale - se has_rid = 0: - Singola Fatturazione Fatturazione alternativa: Per ogni ordine \u00e8 possibile definire un secondo cliente al quale intestare la fattura, l'impostazione di un cliente per la fatturazione alternativa avviene tramite scrittura nel campo cliente_fatt_alt dell'id del cliente alternativo. Grenke: Indica un ordine di tipo grenke, questo campo viene impostato a 1 automaticamente quando viene selezionato il cliente grenke. Se questo campo \u00e8 a 1 gli articoli inseriti nell'ordine con need_serial_grenke = 1 avranno bisogno della matricola","title":"Fatturazione"},{"location":"ordini/#acconto","text":"Per ogni ordine \u00e8 possibile associare un acconto, l'inserimento di un acconto comporta la creazione di un secondo ordine di acconto nel momento di passaggio dallo stato preventivo allo stato ORDINE. L'inserimento dell'acconto avviene tramite scrittura dei campi down_payment (totale acconto) e down_payment_type (metodo di pagamento). La creazione dell'acconto avviene quando down_payment \u00e8 > 0, in tal caso se down_payment_type non corrisponde ad un metodo di pagamento viene sollevato un errore. L'ordine di acconto viene generato automaticamente nello stato evaso.","title":"Acconto"},{"location":"ordini/#pagamento","text":"E' necessario associare ad ogni ordine un metodo di pagamento. L'associazione avviene tramite scrittura nel campo pagamento della tabella ordine dell'id del metodo di pagamento. Attesa di pagamento E' possibile bloccare il passaggio di stato di un ordine in attesa del pagamento impostando il campo wait_payment dell'ordine a 1.","title":"Pagamento"},{"location":"ordini/#informazioni-tecniche","text":"E' possibile inserire delle informazioni del reparto tecnico all'interno dell'ordine: tecnico \u2192 l'assegnazione di un ordine ad un tecnico prevede l'invio di una mail al tecnico interessato data_consegna note_tecniche","title":"Informazioni tecniche"},{"location":"ordini/#articoli-cliente","text":"All'interno di un ordine \u00e8 possibile inserire degli articoli che sono gi\u00e0 in possesso del cliente per poter sincronizzare l'informazione con trace. Questi articoli vengono trattati in maniera diversa rispetto agli articolo_ordine e vengono salvati in una tabella dedicata (articolo_cliente_ordine). E' possibile inserire in questa tabella tutti gli articoli appartenenti ad un gruppo con aggiungi_a_cliente = true.","title":"Articoli cliente"},{"location":"ordini/#allegati","text":"E' possibile allegare ad un ordine diversi file, i file devono essere caricati tramite lo specifico enpoint.","title":"Allegati"},{"location":"ordini/#pdf","text":"E' disponibile uno specifico endpoint che resitituisce un file PDF con una rappresentazione dell'ordine.","title":"PDF"},{"location":"ordini/#ciclo-dellordine","text":"","title":"Ciclo dell'ordine"},{"location":"ordini/#fasi","text":"Ogni ordine segue un ciclo specifico che comprende 5 fasi: Preventivo E' lo stato iniziale di ogni ordine e rappresenta il momento dell'offerta al cliente, permette l'inserimento di molte informazioni mantenendone la maggior parte non obbligatorie. In questo modo \u00e8 possibile creare un preventivo iniziale con le informazioni in possesso per poi integrarle in seguito. Ordine E' il primo stato successivo alla conferma del preventivo, il passaggio a questo stato rappresenta il raggiunto accordo con il cliente sull'ordine e permette di procedere ai passaggi successivi. Per effettuare il passaggio ad ordine \u00e8 necessario inserire buona parte delle informazioni che erano facoltative in fase di preventivo. Gli ordini in questo stato vengono letti dal programma di contabilit\u00e0 che genera l'impegno e modifica lo stato impostandolo ad impegno. Impegno Quando un ordine giunge in questo stato significa che \u00e8 stato generato correttamente l'impegno in contabilit\u00e0 e, dopo i necessari controlli, \u00e8 possibile passare allo stato lavorazione Lavorazione Lo stato in lavorazione indica che \u00e8 in corso la fase di preparazione del materiale e di consegna al cliente. Evaso E' lo stato finale di un ordine, quando un ordine giunge in questo stato significa che il ciclo \u00e8 completato e gli articoli inseriti possono essere sincronizzati con trace e letti dal programma di contabilit\u00e0 per procedere alla generazione della fattura.","title":"Fasi"},{"location":"ordini/#passaggi-di-stato","text":"Quando un ordine viene creato si trova in fase di preventivo, nel passaggio agli stati successivi vengono effettuate diverse operazioni che \u00e8 possibile suddividere in 2 categorie: controlli e azioni. I controlli e le azioni vengono effettuati prima del passaggio di stato tramite un middleware inserito nell'endpoint di modifica stato di un ordine. Per ogni ordine viene controllato che lo stato di destinazione non sia uguale allo stato attuale e che sia compatibile con lo stato dell'ordine attuale. Calcolo stati disponibili: switch (ordine.stato) { case 1: if (ordine.deleted) stati_disponibili = [ { status_id: 0, status_loc_desc: \"CANCELLATO\", active: true }, { status_id: 1, status_loc_desc: \"ARCHIVIATO\", active: false }, { status_id: 2, status_loc_desc: \"PREVENTIVO\", active: false }, ]; else stati_disponibili = [ { status_id: 0, status_loc_desc: \"CANCELLATO\", active: false }, { status_id: 1, status_loc_desc: \"ARCHIVIATO\", active: true }, { status_id: 2, status_loc_desc: \"PREVENTIVO\", active: false }, ]; break; case 2: stati_disponibili = [ { status_id: 0, status_loc_desc: \"CANCELLATO\", active: false }, { status_id: 1, status_loc_desc: \"ARCHIVIATO\", active: false }, { status_id: 2, status_loc_desc: \"PREVENTIVO\", active: true }, { status_id: 3, status_loc_desc: \"ORDINE\", active: false }, ]; break; case 3: stati_disponibili = [ { status_id: 3, status_loc_desc: \"ORDINE\", active: true }, ]; break; case 5: if (ordine.data_fatturazione == null) stati_disponibili = [ { status_id: 5, status_loc_desc: \"IMPEGNO\", active: true }, { status_id: 6, status_loc_desc: \"LAVORAZIONE\", active: false }, { status_id: 0, status_loc_desc: \"CANCELLATO\", active: false }, ]; else stati_disponibili = [ { status_id: 5, status_loc_desc: \"IMPEGNO\", active: true }, { status_id: 6, status_loc_desc: \"LAVORAZIONE\", active: false }, ]; break; case 6: if (ordine.data_fatturazione == null) stati_disponibili = [ { status_id: 6, status_loc_desc: \"LAVORAZIONE\", active: true }, { status_id: 7, status_loc_desc: \"EVASO\", active: false }, { status_id: 0, status_loc_desc: \"CANCELLATO\", active: false }, ]; else stati_disponibili = [ { status_id: 6, status_loc_desc: \"LAVORAZIONE\", active: true }, { status_id: 7, status_loc_desc: \"EVASO\", active: false }, ]; break; case 7: if (ordine.data_fatturazione == null) stati_disponibili = [ { status_id: 7, status_loc_desc: \"EVASO\", active: true }, { status_id: 0, status_loc_desc: \"CANCELLATO\", active: false }, ]; else stati_disponibili = [ { status_id: 7, status_loc_desc: \"EVASO\", active: true }, ]; break; default: stati_disponibili = []; } Controlli specifici per stato: I controlli e le azioni effettuati in seguito dipendono dallo stato di destinazione dell'ordine, se i controlli o le azioni sollevano un errore il passaggio di stato non viene eseguito \u2192 Preventivo (2) Azioni: Aggiorno la data dell'ordine impostando la data attuale \u2192 Ordine (3) Controlli: Campi obbligatori locale (loc_desc,via,citta,prov,profilo_locale) Campi obbligatori cliente (ragosc,via,cap,citta,provincia,piva) IBAN obbligatorio se pagamento con sdd Note tecniche obbligatorie in base agli articoli inseriti (se c'\u00e8 almeno un articolo con order_note = 1 note_tecniche \u00e8 obbligatorio) Azioni: Aggiorno la data dell'ordine impostando la data attuale Generazione ordine di acconto (se down_payment > 0) Invio mail creazione ordine \u2192 Lavorazione (6) Controlli: ordine non in attesa di pagamento (wait_payment) \u2192 Evaso (7) Controlli: ordine non in attesa di pagamento (wait_payment) sono state inserite le matricole e attivazioni necessarie prg locale obbligatorio id_trace cliente obbligatorio Azioni: Aggiorno la data_evasione dell'ordine con la data attuale Eseguo import ordine in trace (compresi articoli cliente)","title":"Passaggi di stato"},{"location":"rinnovi/","text":"Rinnovi Alcuni degli articoli che \u00e8 possibile all'interno degli ordini sono articoli con fatturazione periodica, per questi articoli \u00e8 necessario gestire anche la fase successiva al completamento dell'ordine: i rinnovi. T-order permette di gestire rinnovi di diverso tipo, in particolare possiamo distinguere due macro sezioni: Annuali/Biennali/31-12 I rinnovi Annuali/Biennali sono organizzati in due tabelle: rinnovo e articolo_rinnovo. Ad ogni articolo_rinnovo corrisponde uno ed un solo rinnovo, ad ogni rinnovo (se non \u00e8 completato) corrisponono uno o pi\u00f9 articolo_rinnovo. Gli articoli all'interno dei rinnovi di questo tipo sono gli articoli con mth_12, mth_24 o new_year = 1 Import da t_trace I rinnovi vengono generati tramite import dalla tabella t_trace: Creazione record rinnovi Query di estrazione SELECT t_trace.id as t_trace_id,cus1.id as cliente,cus2.id as cliente_fatt_alt, locale.id as locale, articolo.id as articolo, price,serial_number,installation_date, due_date_maintenance, payment_type FROM [T-ORDER].[db_ordini].t_trace JOIN [T-ORDER].[db_ordini].cliente AS cus1 ON cus1.id_trace = t_trace.customer_id JOIN [T-ORDER].[db_ordini].locale ON locale.piva = cus1.piva AND locale.prg = t_trace.prg_location JOIN [T-ORDER].[db_ordini].articolo ON articolo.id_trace = t_trace.article_id LEFT JOIN [T-ORDER].[db_ordini].cliente AS cus2 ON cus2.id_trace = t_trace.customer_for_billing WHERE (date_import_rinnovi IS NULL) AND due_date_maintenance IS NOT NULL AND trace_id IS NOT NULL AND (deleted IS NULL OR deleted = 0); Raggruppamento per (mese,anno,locale) Inserimento Configurazione rinnovo locale Tutti i rinnovi di un certo locale condividono alcune informazioni: pagamento, fatturazione alternativa, note e tacito rinnovo. Questi dati vengono salvati all'interno della tabella configurazione_rinnovo_locale che prevede un record per ogni locale per il quale sono stati inseriti almeno uno dei campi scritti sopra. Disdetta E' possibile eliminare un articolo da un rinnovo effettuando la disdetta. La disdetta dell'articolo di un rinnovo consiste in: scrittura disdetta della t_deleted { articolo, prezzo, matricola, data_scadenza, data_cancellazione: now(), cliente, locale, motivazione, utente: utente_richiesta, note } invio disdetta a trace (se trace_id != null) { \"deleted\": 1, \"date_import_trace\": null } eliminazione articolo_rinnovo impostazione rinnovo a completato (se non ci sono altri articoli) Inserimento nuovi articoli All'interno di un rinnovo \u00e8 possibile inserire gli articoli che hanno mth _12, mth_24 o new_year = 1. Per la logica di rinnovo di questi articoli vedi rinnovo con trace_id a null . Cambio piano E' possibile effettuare un cambio piano (modifica dell'articolo) con tutti gli articoli appartenenti allo stesso gruppo e con lo stesso tipo di scadenza. E' disponibile uno specifico endpoint che per ogni articolo_rinnovo restituisce i possibili articoli sostituitivi. Per gli articoli inseriti successivamente e quindi non ancora importati in trace la procedura di cambio piano non \u00e8 disponibile, poich\u00e8 il cambio piano in quel caso avviene tramite cancellazione diretta dell'articolo e inserimento id un nuovo articolo. La procedura del cambio piano, dopo i controlli iniziali, varia in base al campo anticipo scadenza: Infatti se il campo anticipo scadenza \u00e8 true significa che oltre a effettuare il cambio dell'articolo \u00e8 necessario portare ad oggi la scadenza dell'articolo. Controlli iniziali: l'articolo rinnovo deve avere trace_id (non deve essere un nuovo articolo) l'articolo selezionato per il cambio deve rientrare nelle opzioni di cambio piano dell'articolo rinnovo l'articolo selezionato per il cambio deve avere id_trace compilato Procedura cambio piano (anticipa = true): Modifico articolo, prezzo, matricola e scadenza (oggi) dell'articolo rinnovo Controllo se esiste gi\u00e0 un rinnovo dello stesso locale nel mese attuale Se non esiste creo un nuovo rinnovo nel mese attuale Inserisco l'articolo all'interno del rinnovo nel mese attuale Invio la modifica dell'articolo, del prezzo, della matricola e della scadenza a trace Se non sono presenti altri articoli_rinnovo imposto il rinnovo a completato Procedura cambio piano (anticipa = false): Modifico articolo, prezzo e matricola dell'articolo rinnovo Invio la modifica dell'articolo, del prezzo e della matricola a trace Metodi di pagamento Il metodo di pagamento, salvato nella configurazione_rinnovo_locale, per questo tipo di rinnovo pu\u00f2 essere uno qualsiasi di quelli disponibili Rinnovo Tutti gli articoli di un rinnovo vengono rinnovati insieme ma \u00e8 comunque necessario analizzare ogni articolo_rinnovo poich\u00e8 possono presentarsi diverse casistiche: Salvataggio storico: Ogni riga della articolo_rinnovo del rinnovo viene copiata nella articolo_rinnovo_storico. Import trace: Il rinnovo viene comunicato a trace tramite la tabella t_trace: Se l'articolo_rinnovo ha il campo trace_id a NULL : Significa che \u00e8 stato inserito manualmente dopo l'ultimo rinnovo, in questo caso viene passato il nuovo articolo a trace tramite un insert nella tabella t_trace con i seguenti campi: { order_type_id:15, customer_for_billing, customer_id, prg_location, article_id, price, serial_number, installation_date: now(), due_date_maintenance, type_billing, payment_type, create_operation (in base all'articolo) } Se l'articolo_rinnovo ha il campo trace_id diverso da NULL : Significa che \u00e8 stato importato dalla t_trace, in questo caso viene effettuato un update sul record della t_trace con trace_id corrispondente: { price, serial_number, due_date_maintenance, date_import_trace: null, (per import in trace) date_import_rinnovi: null (per importare prossimo rinnovo) create_operation (in base all'articolo) } Generazione ordine di rinnovo: Per ogni rinnovo viene generato un ordine: { data:now(), cliente_fatt_alt, cliente, locale, utente, date_insert, tipo: 15, (rinnovo) is_closed: 1, stato: 7, (evaso) pagamento, data_evasione: now(), rinnovo, tipo_fatturazione } Gli articoli del rinnovo vengono raggruppati per id_articolo, sconto e prezzo, aumentando di conseguenza la quantit\u00e0 e poi inseriti nella articolo_ordine associati all'ordine appena creato: { ordine, articolo, prezzo, quantita, sconto } ``` Eliminazione articoli rinnovo Impostazione rinnovo a completato Proposta Tutti gli articoli di un rinnovo con il campo proponi = 1 fanno parte della proposta di rinnovo In base a questo campo viene popolato il pdf di proposta di rinnovo. Mensili/Trimestrali/Semestrali I rinnovi mensili sono organizzati in due tabelle: mensile e articolo_mensile. Ad ogni articolo_mensile corrisponde uno ed un solo mensile, ad ogni mensile corrisponono uno o pi\u00f9 articolo_mensile. N.B. A differenza dei rinnovi Annuali/Biennali/31-12 i rinnovi di questo tipo vengono eliminati una volta completati, per questo motivo non devono esistere mensili senza articoli_mensili collegati. Import da trace I rinnovi vengono generati tramite import dalla tabella t_trace. La data di scadenza per ogni nuovo rinnovo \u00e8 il primo giorno del mese successivo all'importazione. Creazione record mensili: Query di estrazione SELECT t_trace.id as id_trace,articolo.id as articolo,t_trace.price as prezzo, t_trace.serial_number as matricola,cus1.id as cliente, cus2.id as cliente_fatt_alt, locale.id as locale,t_trace.type_billing as tipo_fatturazione FROM t_trace JOIN articolo ON articolo.id_trace = t_trace.article_id JOIN cliente as cus1 ON cus1.id_trace = t_trace.customer_id LEFT JOIN cliente as cus2 ON cus2.id_trace = t_trace.customer_for_billing JOIN locale ON locale.piva = cus1.piva AND locale.prg = t_trace.prg_location WHERE articolo.mth_1 = 1 AND deleted <> 1 AND date_import_monthly IS NULL raggruppamento per cliente,locale, e tipo_fatturazione. Importazione Metodo di pagamento Gli unici metodi di pagamento concessi sono quelli restituiti nella sezione canoni dei metodi di pagamento Configurazione mensile locale Tutti i mensili di un certo locale condividono alcune informazioni: pagamento, fatturazione alternativa e note. Questi dati vengono salvati all'interno della tabella configurazione_mensile_locale che prevede un record per ogni locale per il quale sono stati inseriti almeno uno dei campi scritti sopra. Fatturazione per cliente I rinnovi di uno stesso cliente ma con locali diversi, appartenenti allo stesso mese e anno di scadenza possono essere raggruppati in un solo ordine selezionando per i rinnovi desiderati il campo fatturazione per cliente. Vedi sotto come avviene il rinnovo. Rinnovo Il rinnovo avviene contemporaneamente per tutti i rinnovi di un certo mese e anno. Controllo iban: if group_billing = 1 then if cliente.iban != null && cliente.iban != \"\" then return true else return false else if fatt_alternativa != null then if cliente_fatt_alt.iban != null && cliente_fatt_alt.iban != \"\" then return true else return false else if locale.iban != null && locale.iban != \"\" then return true else if cliente.iban != null && cliente.iban != \"\" then return true else return false Controllo metodo di pagamento Se tutti i mensili del mese attuale passano i controlli: Import trace (per ogni mensile): Il rinnovo viene comunicato a trace tramite la tabella t_trace: Se l'articolo_mensile ha il campo trace_id a NULL : Significa che \u00e8 stato inserito manualmente dopo l'ultimo rinnovo - Viene passato il nuovo articolo a trace tramite un insert nella tabella t_trace con i seguenti campi: json { order_type_id: 15, customer_for_billing, prg_location, article_id, price, serial_number, installation_date: now(), due_date_maintenance, type_billing, payment_type, create_operation (in base all'articolo) } Viene aggiornato l'articolo mensile con l'id della t_trace del record appena inserito Se l'articolo_rinnovo ha il campo trace_id diverso da NULL : Significa che \u00e8 stato importato dalla t_trace, in questo caso viene effettuato un update sul record della t_trace con trace_id corrispondente: json { price, serial_number, due_date_maintenance, date_import_trace: null, (per import in trace) date_import_monthly: now(), (non deve essere reimportato) create_operation: (in base all'articolo) } Generazione ordine di rinnovo Suddivisione fatturazione per cliente i mensili con group_billing = 1 vengono divisi da quelli con group_billing = 0 e raggruppati per id cliente Generazione ordini fatturazione per cliente ?? Sincronizzazione configurazioni locali ?? Generazione ordine: per ogni gruppo di mensili viene generato un ordine utilizzando la configurazione del locale del rinnovo mensile con id pi\u00f9 basso , con i seguenti campi: { data: now(), cliente_fatt_alt, cliente, utente, (chi ha effettuato la richiesta) totale, date_insert, tipo: 15, (rinnovo), is_closed: 1, stato: 7, (evaso) pagamento, data_evasione: now(), mensile, tipo_fatturazione } Generazione articoli ordine: gli articoli mensili di tutti gli articoli del gruppo vengono a loro volta raggruppati per id articolo e prezzo , aumentando la quantit\u00e0 di conseguenza, dopo di che vengono generati gli articoli ordine e associati all'ordine generato in precedenza con i seguenti campi: { ordine, articolo, prezzo, quantita, sconto } descrizione_articolo_ordine: ... ... Generazione ordini per fatturazione classica Generazione ordine: per ogni mensile viene generato un ordine con i seguenti campi: { data: now(), cliente_fatt_alt, cliente, locale, utente, (chi ha effettuato la richiesta) totale, date_insert, tipo: 15, (rinnovo) is_closed: 1, stato: 7, (evaso) pagamento, data_evasione: now(), mensile, tipo_fatturazione } Generazione articoli ordine: gli articoli del mensile vengono raggruppati per id articolo e prezzo , aumentando la quantit\u00e0 di conseguenza e dopo di che associati all'ordine generato in precedenza con i seguenti campi: { ordine, articolo, prezzo, quantita, sconto } descrizione_articolo_ordine: ... ... Aggiornamento mensili (per ogni mensile) Calcolo la nuova data di scadenza del mensile come next_billing + tipo_fatturazione.mesi data.setMonth(data.getMonth() + tipo_fatturazione.mesi); Controllo se esiste gi\u00e0 un mensile per questo tipo di fatturazione, locale, mese e anno: Se esiste sposto gli articoli nel mensile esistente e cancello il mensile vuoto Altrimenti modifico la data di scadenza del mensile con la data calcolata Cambio piano E' possibile effettuare un cambio piano (modifica dell'articolo) con tutti gli articoli appartenenti allo stesso gruppo e con mth_1 = 1; E' disponibile uno specifico endpoint che per ogni articolo_mensile restituisce i possibili articoli sostituitivi. Per gli articoli inseriti successivamente e quindi non ancora importati in trace la procedura di cambio piano non \u00e8 disponibile, poich\u00e8 il cambio piano in quel caso avviene tramite cancellazione diretta dell'articolo e inserimento id un nuovo articolo. Controlli iniziali: l'articolo mensile deve avere trace_id (non deve essere un nuovo articolo) l'articolo selezionato per il cambio deve rientrare nelle opzioni di cambio piano dell'articolo mensile l'articolo selezionato per il cambio deve avere id_trace compilato Procedura cambio piano: Modifico articolo, prezzo e matricola dell'articolo mensile Invio la modifica dell'articolo, del prezzo e della matricola a trace Disdetta E' possibile eliminare un articolo da un mensile effettuando la disdetta. La disdetta dell'articolo di un mensile consiste in: scrittura disdetta nella t_deleted: { articolo, prezzo, matricola, data_scadenza, data_cancellazione: now(), cliente, locale, motivazione, utente: utente_richiesta, note } invio disdetta a trace (se trace_id != null) { \"deleted\": 1, \"date_import_trace\": null } eliminazione dell'articolo mensile eliminazione del mensile (se non ci sono altri articoli)","title":"Rinnovi"},{"location":"rinnovi/#rinnovi","text":"Alcuni degli articoli che \u00e8 possibile all'interno degli ordini sono articoli con fatturazione periodica, per questi articoli \u00e8 necessario gestire anche la fase successiva al completamento dell'ordine: i rinnovi. T-order permette di gestire rinnovi di diverso tipo, in particolare possiamo distinguere due macro sezioni:","title":"Rinnovi"},{"location":"rinnovi/#annualibiennali31-12","text":"I rinnovi Annuali/Biennali sono organizzati in due tabelle: rinnovo e articolo_rinnovo. Ad ogni articolo_rinnovo corrisponde uno ed un solo rinnovo, ad ogni rinnovo (se non \u00e8 completato) corrisponono uno o pi\u00f9 articolo_rinnovo. Gli articoli all'interno dei rinnovi di questo tipo sono gli articoli con mth_12, mth_24 o new_year = 1","title":"Annuali/Biennali/31-12"},{"location":"rinnovi/#import-da-t_trace","text":"I rinnovi vengono generati tramite import dalla tabella t_trace: Creazione record rinnovi Query di estrazione SELECT t_trace.id as t_trace_id,cus1.id as cliente,cus2.id as cliente_fatt_alt, locale.id as locale, articolo.id as articolo, price,serial_number,installation_date, due_date_maintenance, payment_type FROM [T-ORDER].[db_ordini].t_trace JOIN [T-ORDER].[db_ordini].cliente AS cus1 ON cus1.id_trace = t_trace.customer_id JOIN [T-ORDER].[db_ordini].locale ON locale.piva = cus1.piva AND locale.prg = t_trace.prg_location JOIN [T-ORDER].[db_ordini].articolo ON articolo.id_trace = t_trace.article_id LEFT JOIN [T-ORDER].[db_ordini].cliente AS cus2 ON cus2.id_trace = t_trace.customer_for_billing WHERE (date_import_rinnovi IS NULL) AND due_date_maintenance IS NOT NULL AND trace_id IS NOT NULL AND (deleted IS NULL OR deleted = 0); Raggruppamento per (mese,anno,locale) Inserimento","title":"Import da t_trace"},{"location":"rinnovi/#configurazione-rinnovo-locale","text":"Tutti i rinnovi di un certo locale condividono alcune informazioni: pagamento, fatturazione alternativa, note e tacito rinnovo. Questi dati vengono salvati all'interno della tabella configurazione_rinnovo_locale che prevede un record per ogni locale per il quale sono stati inseriti almeno uno dei campi scritti sopra.","title":"Configurazione rinnovo locale"},{"location":"rinnovi/#disdetta","text":"E' possibile eliminare un articolo da un rinnovo effettuando la disdetta. La disdetta dell'articolo di un rinnovo consiste in: scrittura disdetta della t_deleted { articolo, prezzo, matricola, data_scadenza, data_cancellazione: now(), cliente, locale, motivazione, utente: utente_richiesta, note } invio disdetta a trace (se trace_id != null) { \"deleted\": 1, \"date_import_trace\": null } eliminazione articolo_rinnovo impostazione rinnovo a completato (se non ci sono altri articoli)","title":"Disdetta"},{"location":"rinnovi/#inserimento-nuovi-articoli","text":"All'interno di un rinnovo \u00e8 possibile inserire gli articoli che hanno mth _12, mth_24 o new_year = 1. Per la logica di rinnovo di questi articoli vedi rinnovo con trace_id a null .","title":"Inserimento nuovi articoli"},{"location":"rinnovi/#cambio-piano","text":"E' possibile effettuare un cambio piano (modifica dell'articolo) con tutti gli articoli appartenenti allo stesso gruppo e con lo stesso tipo di scadenza. E' disponibile uno specifico endpoint che per ogni articolo_rinnovo restituisce i possibili articoli sostituitivi. Per gli articoli inseriti successivamente e quindi non ancora importati in trace la procedura di cambio piano non \u00e8 disponibile, poich\u00e8 il cambio piano in quel caso avviene tramite cancellazione diretta dell'articolo e inserimento id un nuovo articolo. La procedura del cambio piano, dopo i controlli iniziali, varia in base al campo anticipo scadenza: Infatti se il campo anticipo scadenza \u00e8 true significa che oltre a effettuare il cambio dell'articolo \u00e8 necessario portare ad oggi la scadenza dell'articolo. Controlli iniziali: l'articolo rinnovo deve avere trace_id (non deve essere un nuovo articolo) l'articolo selezionato per il cambio deve rientrare nelle opzioni di cambio piano dell'articolo rinnovo l'articolo selezionato per il cambio deve avere id_trace compilato Procedura cambio piano (anticipa = true): Modifico articolo, prezzo, matricola e scadenza (oggi) dell'articolo rinnovo Controllo se esiste gi\u00e0 un rinnovo dello stesso locale nel mese attuale Se non esiste creo un nuovo rinnovo nel mese attuale Inserisco l'articolo all'interno del rinnovo nel mese attuale Invio la modifica dell'articolo, del prezzo, della matricola e della scadenza a trace Se non sono presenti altri articoli_rinnovo imposto il rinnovo a completato Procedura cambio piano (anticipa = false): Modifico articolo, prezzo e matricola dell'articolo rinnovo Invio la modifica dell'articolo, del prezzo e della matricola a trace","title":"Cambio piano"},{"location":"rinnovi/#metodi-di-pagamento","text":"Il metodo di pagamento, salvato nella configurazione_rinnovo_locale, per questo tipo di rinnovo pu\u00f2 essere uno qualsiasi di quelli disponibili","title":"Metodi di pagamento"},{"location":"rinnovi/#rinnovo","text":"Tutti gli articoli di un rinnovo vengono rinnovati insieme ma \u00e8 comunque necessario analizzare ogni articolo_rinnovo poich\u00e8 possono presentarsi diverse casistiche: Salvataggio storico: Ogni riga della articolo_rinnovo del rinnovo viene copiata nella articolo_rinnovo_storico. Import trace: Il rinnovo viene comunicato a trace tramite la tabella t_trace: Se l'articolo_rinnovo ha il campo trace_id a NULL : Significa che \u00e8 stato inserito manualmente dopo l'ultimo rinnovo, in questo caso viene passato il nuovo articolo a trace tramite un insert nella tabella t_trace con i seguenti campi: { order_type_id:15, customer_for_billing, customer_id, prg_location, article_id, price, serial_number, installation_date: now(), due_date_maintenance, type_billing, payment_type, create_operation (in base all'articolo) } Se l'articolo_rinnovo ha il campo trace_id diverso da NULL : Significa che \u00e8 stato importato dalla t_trace, in questo caso viene effettuato un update sul record della t_trace con trace_id corrispondente: { price, serial_number, due_date_maintenance, date_import_trace: null, (per import in trace) date_import_rinnovi: null (per importare prossimo rinnovo) create_operation (in base all'articolo) } Generazione ordine di rinnovo: Per ogni rinnovo viene generato un ordine: { data:now(), cliente_fatt_alt, cliente, locale, utente, date_insert, tipo: 15, (rinnovo) is_closed: 1, stato: 7, (evaso) pagamento, data_evasione: now(), rinnovo, tipo_fatturazione } Gli articoli del rinnovo vengono raggruppati per id_articolo, sconto e prezzo, aumentando di conseguenza la quantit\u00e0 e poi inseriti nella articolo_ordine associati all'ordine appena creato: { ordine, articolo, prezzo, quantita, sconto } ``` Eliminazione articoli rinnovo Impostazione rinnovo a completato","title":"Rinnovo"},{"location":"rinnovi/#proposta","text":"Tutti gli articoli di un rinnovo con il campo proponi = 1 fanno parte della proposta di rinnovo In base a questo campo viene popolato il pdf di proposta di rinnovo.","title":"Proposta"},{"location":"rinnovi/#mensilitrimestralisemestrali","text":"I rinnovi mensili sono organizzati in due tabelle: mensile e articolo_mensile. Ad ogni articolo_mensile corrisponde uno ed un solo mensile, ad ogni mensile corrisponono uno o pi\u00f9 articolo_mensile. N.B. A differenza dei rinnovi Annuali/Biennali/31-12 i rinnovi di questo tipo vengono eliminati una volta completati, per questo motivo non devono esistere mensili senza articoli_mensili collegati.","title":"Mensili/Trimestrali/Semestrali"},{"location":"rinnovi/#import-da-trace","text":"I rinnovi vengono generati tramite import dalla tabella t_trace. La data di scadenza per ogni nuovo rinnovo \u00e8 il primo giorno del mese successivo all'importazione. Creazione record mensili: Query di estrazione SELECT t_trace.id as id_trace,articolo.id as articolo,t_trace.price as prezzo, t_trace.serial_number as matricola,cus1.id as cliente, cus2.id as cliente_fatt_alt, locale.id as locale,t_trace.type_billing as tipo_fatturazione FROM t_trace JOIN articolo ON articolo.id_trace = t_trace.article_id JOIN cliente as cus1 ON cus1.id_trace = t_trace.customer_id LEFT JOIN cliente as cus2 ON cus2.id_trace = t_trace.customer_for_billing JOIN locale ON locale.piva = cus1.piva AND locale.prg = t_trace.prg_location WHERE articolo.mth_1 = 1 AND deleted <> 1 AND date_import_monthly IS NULL raggruppamento per cliente,locale, e tipo_fatturazione. Importazione","title":"Import da trace"},{"location":"rinnovi/#metodo-di-pagamento","text":"Gli unici metodi di pagamento concessi sono quelli restituiti nella sezione canoni dei metodi di pagamento","title":"Metodo di pagamento"},{"location":"rinnovi/#configurazione-mensile-locale","text":"Tutti i mensili di un certo locale condividono alcune informazioni: pagamento, fatturazione alternativa e note. Questi dati vengono salvati all'interno della tabella configurazione_mensile_locale che prevede un record per ogni locale per il quale sono stati inseriti almeno uno dei campi scritti sopra.","title":"Configurazione mensile locale"},{"location":"rinnovi/#fatturazione-per-cliente","text":"I rinnovi di uno stesso cliente ma con locali diversi, appartenenti allo stesso mese e anno di scadenza possono essere raggruppati in un solo ordine selezionando per i rinnovi desiderati il campo fatturazione per cliente. Vedi sotto come avviene il rinnovo.","title":"Fatturazione per cliente"},{"location":"rinnovi/#rinnovo_1","text":"Il rinnovo avviene contemporaneamente per tutti i rinnovi di un certo mese e anno. Controllo iban: if group_billing = 1 then if cliente.iban != null && cliente.iban != \"\" then return true else return false else if fatt_alternativa != null then if cliente_fatt_alt.iban != null && cliente_fatt_alt.iban != \"\" then return true else return false else if locale.iban != null && locale.iban != \"\" then return true else if cliente.iban != null && cliente.iban != \"\" then return true else return false Controllo metodo di pagamento Se tutti i mensili del mese attuale passano i controlli: Import trace (per ogni mensile): Il rinnovo viene comunicato a trace tramite la tabella t_trace: Se l'articolo_mensile ha il campo trace_id a NULL : Significa che \u00e8 stato inserito manualmente dopo l'ultimo rinnovo - Viene passato il nuovo articolo a trace tramite un insert nella tabella t_trace con i seguenti campi: json { order_type_id: 15, customer_for_billing, prg_location, article_id, price, serial_number, installation_date: now(), due_date_maintenance, type_billing, payment_type, create_operation (in base all'articolo) } Viene aggiornato l'articolo mensile con l'id della t_trace del record appena inserito Se l'articolo_rinnovo ha il campo trace_id diverso da NULL : Significa che \u00e8 stato importato dalla t_trace, in questo caso viene effettuato un update sul record della t_trace con trace_id corrispondente: json { price, serial_number, due_date_maintenance, date_import_trace: null, (per import in trace) date_import_monthly: now(), (non deve essere reimportato) create_operation: (in base all'articolo) } Generazione ordine di rinnovo Suddivisione fatturazione per cliente i mensili con group_billing = 1 vengono divisi da quelli con group_billing = 0 e raggruppati per id cliente Generazione ordini fatturazione per cliente ?? Sincronizzazione configurazioni locali ?? Generazione ordine: per ogni gruppo di mensili viene generato un ordine utilizzando la configurazione del locale del rinnovo mensile con id pi\u00f9 basso , con i seguenti campi: { data: now(), cliente_fatt_alt, cliente, utente, (chi ha effettuato la richiesta) totale, date_insert, tipo: 15, (rinnovo), is_closed: 1, stato: 7, (evaso) pagamento, data_evasione: now(), mensile, tipo_fatturazione } Generazione articoli ordine: gli articoli mensili di tutti gli articoli del gruppo vengono a loro volta raggruppati per id articolo e prezzo , aumentando la quantit\u00e0 di conseguenza, dopo di che vengono generati gli articoli ordine e associati all'ordine generato in precedenza con i seguenti campi: { ordine, articolo, prezzo, quantita, sconto } descrizione_articolo_ordine: ... ... Generazione ordini per fatturazione classica Generazione ordine: per ogni mensile viene generato un ordine con i seguenti campi: { data: now(), cliente_fatt_alt, cliente, locale, utente, (chi ha effettuato la richiesta) totale, date_insert, tipo: 15, (rinnovo) is_closed: 1, stato: 7, (evaso) pagamento, data_evasione: now(), mensile, tipo_fatturazione } Generazione articoli ordine: gli articoli del mensile vengono raggruppati per id articolo e prezzo , aumentando la quantit\u00e0 di conseguenza e dopo di che associati all'ordine generato in precedenza con i seguenti campi: { ordine, articolo, prezzo, quantita, sconto } descrizione_articolo_ordine: ... ... Aggiornamento mensili (per ogni mensile) Calcolo la nuova data di scadenza del mensile come next_billing + tipo_fatturazione.mesi data.setMonth(data.getMonth() + tipo_fatturazione.mesi); Controllo se esiste gi\u00e0 un mensile per questo tipo di fatturazione, locale, mese e anno: Se esiste sposto gli articoli nel mensile esistente e cancello il mensile vuoto Altrimenti modifico la data di scadenza del mensile con la data calcolata","title":"Rinnovo"},{"location":"rinnovi/#cambio-piano_1","text":"E' possibile effettuare un cambio piano (modifica dell'articolo) con tutti gli articoli appartenenti allo stesso gruppo e con mth_1 = 1; E' disponibile uno specifico endpoint che per ogni articolo_mensile restituisce i possibili articoli sostituitivi. Per gli articoli inseriti successivamente e quindi non ancora importati in trace la procedura di cambio piano non \u00e8 disponibile, poich\u00e8 il cambio piano in quel caso avviene tramite cancellazione diretta dell'articolo e inserimento id un nuovo articolo. Controlli iniziali: l'articolo mensile deve avere trace_id (non deve essere un nuovo articolo) l'articolo selezionato per il cambio deve rientrare nelle opzioni di cambio piano dell'articolo mensile l'articolo selezionato per il cambio deve avere id_trace compilato Procedura cambio piano: Modifico articolo, prezzo e matricola dell'articolo mensile Invio la modifica dell'articolo, del prezzo e della matricola a trace","title":"Cambio piano"},{"location":"rinnovi/#disdetta_1","text":"E' possibile eliminare un articolo da un mensile effettuando la disdetta. La disdetta dell'articolo di un mensile consiste in: scrittura disdetta nella t_deleted: { articolo, prezzo, matricola, data_scadenza, data_cancellazione: now(), cliente, locale, motivazione, utente: utente_richiesta, note } invio disdetta a trace (se trace_id != null) { \"deleted\": 1, \"date_import_trace\": null } eliminazione dell'articolo mensile eliminazione del mensile (se non ci sono altri articoli)","title":"Disdetta"}]}